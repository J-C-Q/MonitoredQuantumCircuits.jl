import{_ as i,c as t,o as s,a7 as a}from"./chunks/framework.F9cUe38W.js";const g=JSON.parse('{"title":"Getting Started","description":"","frontmatter":{},"headers":[],"relativePath":"getting_started.md","filePath":"getting_started.md","lastUpdated":null}'),e={name:"getting_started.md"},n=a('<h1 id="Getting-Started" tabindex="-1">Getting Started <a class="header-anchor" href="#Getting-Started" aria-label="Permalink to &quot;Getting Started {#Getting-Started}&quot;">​</a></h1><p>MonitoredQuantumCircuits.jl is structured around three core components: <strong>qubit geometry</strong>, <strong>circuit construction</strong>, and <strong>circuit execution</strong>. This guide provides a concise overview to help you begin using the framework effectively.</p><p>Before proceeding, ensure that MonitoredQuantumCircuits.jl is <a href="/MonitoredQuantumCircuits.jl/stable/">installed</a> and loaded:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MonitoredQuantumCircuits</span></span></code></pre></div><h2 id="1.-Select-a-Geometry" tabindex="-1">1. Select a Geometry <a class="header-anchor" href="#1.-Select-a-Geometry" aria-label="Permalink to &quot;1. Select a Geometry {#1.-Select-a-Geometry}&quot;">​</a></h2><p>A <code>Geometry</code> defines the arrangement and connectivity of qubits, typically represented as a graph. Operations can only be applied to qubits that are connected within the chosen geometry. For further details, refer to the <a href="/MonitoredQuantumCircuits.jl/stable/library/geometries">Geometries</a> documentation.</p><p>To construct a geometry object, use one of the provided constructors. For example:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">geometry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> HoneycombGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Periodic, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="2.-Construct-a-Circuit" tabindex="-1">2. Construct a Circuit <a class="header-anchor" href="#2.-Construct-a-Circuit" aria-label="Permalink to &quot;2. Construct a Circuit {#2.-Construct-a-Circuit}&quot;">​</a></h2><p>A circuit encapsulates the <a href="/MonitoredQuantumCircuits.jl/stable/library/operations">operations</a> applied to the qubits within a given geometry. For more information, see <a href="/MonitoredQuantumCircuits.jl/stable/library/circuits">Circuits</a>.</p><p>To create a circuit, you may use a predefined constructor:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">circuit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MeasurementOnlyKitaev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geometry, px, py, pz; depth</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Alternatively, you can build a circuit iteratively by initializing an empty circuit:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">circuit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Circuit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geometry)</span></span></code></pre></div><p>You may then use the command-line interface to apply operations, or launch the <a href="/MonitoredQuantumCircuits.jl/stable/modules/gui">Graphical User Interface</a> (GUI, work in progress):</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GUI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CircuitComposer!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(circuit)</span></span></code></pre></div><p>Once your circuit is complete, compile it for improved performance:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compiled_circuit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(circuit)</span></span></code></pre></div><h2 id="3.-Execute-the-Circuit" tabindex="-1">3. Execute the Circuit <a class="header-anchor" href="#3.-Execute-the-Circuit" aria-label="Permalink to &quot;3. Execute the Circuit {#3.-Execute-the-Circuit}&quot;">​</a></h2><p>To execute a quantum circuit, first select an appropriate <a href="/MonitoredQuantumCircuits.jl/stable/library/backends">backend</a>. For example, to use a Clifford simulator via QuantumClifford.jl:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">simulator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QuantumClifford</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TableauSimulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nQubits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geometry))</span></span></code></pre></div><p>Or, for state vector simulation using cuQuantum through Qiskit-Aer:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">simulator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Qiskit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GPUStateVectorSimulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Execute the compiled circuit on the chosen backend:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">execute!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compiled_circuit, simulator)</span></span></code></pre></div><p>For additional details, consult the <a href="/MonitoredQuantumCircuits.jl/stable/library/backends">Backends</a> documentation.</p>',26),l=[n];function r(p,h,o,c,d,u){return s(),t("div",null,l)}const y=i(e,[["render",r]]);export{g as __pageData,y as default};

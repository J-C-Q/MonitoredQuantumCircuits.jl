import{_ as e,c as a,o as i,a7 as t}from"./chunks/framework.D7PSVPI8.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"library/backends.md","filePath":"library/backends.md","lastUpdated":null}'),s={name:"library/backends.md"},n=t('<h2 id="Backends" tabindex="-1">Backends <a class="header-anchor" href="#Backends" aria-label="Permalink to &quot;Backends {#Backends}&quot;">​</a></h2><p>A <strong>backend</strong> is a computational engine responsible for executing quantum circuits. Backends may represent either actual quantum hardware or classical simulators. The backend executes the compiled circuit and returns the results for further analysis.</p><p>MonitoredQuantumCircuits.jl provides a range of built-in backends, encompassing both quantum computers and simulators. If you wish to integrate a custom backend, please refer to the <a href="/MonitoredQuantumCircuits.jl/v0.0.1/interfaces/add_backend">backend interface</a> documentation.</p><h3 id="Available-Backends" tabindex="-1">Available Backends <a class="header-anchor" href="#Available-Backends" aria-label="Permalink to &quot;Available Backends {#Available-Backends}&quot;">​</a></h3><ul><li><p><strong>Quantum Computer</strong></p><ul><li><code>IBMBackend</code></li></ul></li><li><p><strong>Simulators</strong></p><ul><li><p><strong>Qiskit Aer</strong></p><ul><li><p><code>StateVectorSimulator</code></p></li><li><p><code>GPUStateVectorSimulator</code></p></li><li><p><code>CliffordSimulator</code></p></li><li><p><code>GPUTensorNetworkSimulator</code></p></li></ul></li><li><p><strong>QuantumClifford</strong></p><ul><li><p><code>TableauSimulator</code></p></li><li><p><code>PauliFrameSimulator</code></p></li><li><p><code>GPUPauliFrameSimulator</code></p></li></ul></li></ul></li></ul><h3 id="Selecting-a-Backend" tabindex="-1">Selecting a Backend <a class="header-anchor" href="#Selecting-a-Backend" aria-label="Permalink to &quot;Selecting a Backend {#Selecting-a-Backend}&quot;">​</a></h3><p>Backends are organized into modules according to their origin. For example, backends provided by <a href="/MonitoredQuantumCircuits.jl/v0.0.1/library/qiskit">Qiskit</a> reside in the <code>Qiskit</code> module, while those from <a href="/MonitoredQuantumCircuits.jl/v0.0.1/library/quantum_clifford">QuantumClifford</a> are found in the <code>QuantumClifford</code> module. To instantiate a backend, prefix the constructor with the appropriate module name. For example, to create a state vector simulator using Qiskit:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">backend </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Qiskit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">StateVectorSimulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>For further details on backend capabilities and usage, consult the respective module documentation.</p>',9),o=[n];function l(r,c,d,u,p,h){return i(),a("div",null,o)}const b=e(s,[["render",l]]);export{m as __pageData,b as default};

import{_ as n,c as l,j as i,a as t,I as e,a7 as a,o,D as r}from"./chunks/framework.Ck1NKG2X.js";const it=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"api.md","filePath":"api.md","lastUpdated":null}'),p={name:"api.md"},c={class:"jldocstring custom-block",open:""},h=i("a",{id:"MonitoredQuantumCircuits.CNOT",href:"#MonitoredQuantumCircuits.CNOT"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.CNOT")],-1),d=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CNOT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Operation</span></span></code></pre></div><p>A singelton type representing the CNOT operation.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/operations/CNOT.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3),u={class:"jldocstring custom-block",open:""},k=i("a",{id:"MonitoredQuantumCircuits.FiniteDepthCircuit",href:"#MonitoredQuantumCircuits.FiniteDepthCircuit"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.FiniteDepthCircuit")],-1),_=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FiniteDepthCircuit{T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Lattice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,M</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Circuit</span></span></code></pre></div><p>A circuit that has a finite depth, i.e. a fixed number of time steps. The circuit is defined on a lattice of type T and can contain operations that act on multiple qubits as well as multiple operations at the same time step.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/circuit.jl#L4-L8" target="_blank" rel="noreferrer">source</a></p>',3),g={class:"jldocstring custom-block",open:""},C=i("a",{id:"MonitoredQuantumCircuits.H",href:"#MonitoredQuantumCircuits.H"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.H")],-1),b=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Operation</span></span></code></pre></div><p>A singelton type representing the H operation.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/operations/H.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3),m={class:"jldocstring custom-block",open:""},y=i("a",{id:"MonitoredQuantumCircuits.HeavyChainLattice",href:"#MonitoredQuantumCircuits.HeavyChainLattice"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.HeavyChainLattice")],-1),E=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HeavyChainLattice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Create a heavy chain lattice with <code>length</code> system qubits and <code>length</code>-1 ancilla qubits inbeween.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/lattices/heavyChainLattice.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3),T={class:"jldocstring custom-block",open:""},j=i("a",{id:"MonitoredQuantumCircuits.HeavyHexagonLattice",href:"#MonitoredQuantumCircuits.HeavyHexagonLattice"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.HeavyHexagonLattice")],-1),F=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HeavyHexagonLattice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sizeX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sizeY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Create a heavy hexagon lattice with dimensions <code>sizeX</code> and <code>sizeY</code>. Thus the lattice has <code>sizeX * sizeY</code> system qubits and ancilla qubits inbeween.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/lattices/heavyHexagonLattice.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3),f={class:"jldocstring custom-block",open:""},Q=i("a",{id:"MonitoredQuantumCircuits.HeavySquareLattice",href:"#MonitoredQuantumCircuits.HeavySquareLattice"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.HeavySquareLattice")],-1),M=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HeavySquareLattice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sizeX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sizeY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Create a heavy square lattice with dimensions <code>sizeX</code> and <code>sizeY</code>. Thus the lattice has <code>sizeX * sizeY</code> system qubits and ancilla qubits inbeween.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/lattices/heavySquareLattice.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3),v={class:"jldocstring custom-block",open:""},A=i("a",{id:"MonitoredQuantumCircuits.HexagonToricCodeLattice",href:"#MonitoredQuantumCircuits.HexagonToricCodeLattice"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.HexagonToricCodeLattice")],-1),S=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HexagonToricCodeLattice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sizeX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sizeY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Simmilar to the <code>HeavyHexagonLattice</code> but with periodic boundary conditions in both directions (i.e. on a torus).</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/lattices/hexagonToricCodeLattice.jl#L2-L6" target="_blank" rel="noreferrer">source</a></p>',3),D={class:"jldocstring custom-block",open:""},B=i("a",{id:"MonitoredQuantumCircuits.Measure",href:"#MonitoredQuantumCircuits.Measure"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Measure")],-1),I=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Measure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Operation</span></span></code></pre></div><p>A singelton type representing the computational basis measurement operation.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/operations/Measure.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3),L={class:"jldocstring custom-block",open:""},x=i("a",{id:"MonitoredQuantumCircuits.RandomCircuit",href:"#MonitoredQuantumCircuits.RandomCircuit"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.RandomCircuit")],-1),P=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RandomCircuit{T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Lattice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,M</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Circuit</span></span></code></pre></div><p>A circuit that is generated randomly. The circuit is defined on a lattice of type T and can contain operations that act on multiple qubits as well as multiple operations at the same time step. The operations are chosen randomly from a given set of operations with a given probability.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/circuit.jl#L272-L276" target="_blank" rel="noreferrer">source</a></p>',3),V={class:"jldocstring custom-block",open:""},R=i("a",{id:"MonitoredQuantumCircuits.Weak_XX",href:"#MonitoredQuantumCircuits.Weak_XX"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Weak_XX")],-1),O=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Weak_XX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Operation</span></span></code></pre></div><p>A singelton type representing the weak XX operation.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/operations/Weak_XX.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3),N={class:"jldocstring custom-block",open:""},w=i("a",{id:"MonitoredQuantumCircuits.Weak_YY",href:"#MonitoredQuantumCircuits.Weak_YY"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Weak_YY")],-1),J=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Weak_YY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Operation</span></span></code></pre></div><p>A singelton type representing the weak YY operation.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/operations/Weak_YY.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3),q={class:"jldocstring custom-block",open:""},X=i("a",{id:"MonitoredQuantumCircuits.Weak_ZZ",href:"#MonitoredQuantumCircuits.Weak_ZZ"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Weak_ZZ")],-1),Y=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Weak_ZZ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Operation</span></span></code></pre></div><p>A singelton type representing the weak ZZ operation.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/operations/Weak_ZZ.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3),H={class:"jldocstring custom-block",open:""},G=i("a",{id:"MonitoredQuantumCircuits.XX",href:"#MonitoredQuantumCircuits.XX"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.XX")],-1),Z=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">XX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Operation</span></span></code></pre></div><p>A singelton type representing the XX operation.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/operations/XX.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3),z={class:"jldocstring custom-block",open:""},U=i("a",{id:"MonitoredQuantumCircuits.YY",href:"#MonitoredQuantumCircuits.YY"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.YY")],-1),W=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">YY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Operation</span></span></code></pre></div><p>A singelton type representing the YY operation.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/operations/YY.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3),$={class:"jldocstring custom-block",open:""},K=i("a",{id:"MonitoredQuantumCircuits.ZZ",href:"#MonitoredQuantumCircuits.ZZ"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.ZZ")],-1),ii=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ZZ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Operation</span></span></code></pre></div><p>A singelton type representing the ZZ operation.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/operations/ZZ.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3),si={class:"jldocstring custom-block",open:""},ti=i("a",{id:"MonitoredQuantumCircuits.EmptyFiniteDepthCircuit-Tuple{MonitoredQuantumCircuits.Lattice}",href:"#MonitoredQuantumCircuits.EmptyFiniteDepthCircuit-Tuple{MonitoredQuantumCircuits.Lattice}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.EmptyFiniteDepthCircuit")],-1),ei=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">EmptyFiniteDepthCircuit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lattice</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Lattice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Create an empty circuit on the given lattice.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/circuit.jl#L25-L29" target="_blank" rel="noreferrer">source</a></p>',3),ai={class:"jldocstring custom-block",open:""},ni=i("a",{id:"MonitoredQuantumCircuits.apply!-Tuple{FiniteDepthCircuit, Integer, MonitoredQuantumCircuits.Operation, Vararg{Integer}}",href:"#MonitoredQuantumCircuits.apply!-Tuple{FiniteDepthCircuit, Integer, MonitoredQuantumCircuits.Operation, Vararg{Integer}}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.apply!")],-1),li=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">apply!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(circuit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FiniteDepthCircuit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, executionPosition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, operation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, position</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vararg{Integer}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Apply the given operation at a given execution time step at the given position(s) in the circuit. The executionPosition can be used to schedule multiple operations at the same time step. However it is important to first check if the operations are compatible with each other (as of now this will show a warning which can be muted with <code>mute=true</code>).</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/circuit.jl#L56-L60" target="_blank" rel="noreferrer">source</a></p>',3),oi={class:"jldocstring custom-block",open:""},ri=i("a",{id:"MonitoredQuantumCircuits.apply!-Tuple{FiniteDepthCircuit, MonitoredQuantumCircuits.Operation, Vararg{Integer}}",href:"#MonitoredQuantumCircuits.apply!-Tuple{FiniteDepthCircuit, MonitoredQuantumCircuits.Operation, Vararg{Integer}}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.apply!")],-1),pi=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">apply!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(circuit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FiniteDepthCircuit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, operation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, position</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vararg{Integer}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Apply the given operation at the given position(s) in the circuit. Operations that act on more than one qubit need to have the same number of position arguments as qubits they act on, as well as a connection structure that is part of the lattice.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/circuit.jl#L33-L37" target="_blank" rel="noreferrer">source</a></p>',3),ci={class:"jldocstring custom-block",open:""},hi=i("a",{id:"MonitoredQuantumCircuits.connectionGraph-Tuple{MonitoredQuantumCircuits.Operation}",href:"#MonitoredQuantumCircuits.connectionGraph-Tuple{MonitoredQuantumCircuits.Operation}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.connectionGraph")],-1),di=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">connectionGraph</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(operation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return a graph representing the unique gate connections of the operation.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/operations.jl#L24-L28" target="_blank" rel="noreferrer">source</a></p>',3),ui={class:"jldocstring custom-block",open:""},ki=i("a",{id:"MonitoredQuantumCircuits.execute-Tuple{FiniteDepthCircuit, MonitoredQuantumCircuits.Backend}",href:"#MonitoredQuantumCircuits.execute-Tuple{FiniteDepthCircuit, MonitoredQuantumCircuits.Backend}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.execute")],-1),_i=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(circuit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FiniteDepthCircuit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, backend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Backend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; verbose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Execute the given circuit on the given backend. The backend needs to be a subtype of Backend. The verbose flag can be used to print additional information about individual execution steps.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/circuit.jl#L147-L151" target="_blank" rel="noreferrer">source</a></p>',3),gi={class:"jldocstring custom-block",open:""},Ci=i("a",{id:"MonitoredQuantumCircuits.execute-Union{Tuple{T}, Tuple{Function, Vector{T}, MonitoredQuantumCircuits.Simulator, MonitoredQuantumCircuits.Remote.Cluster}} where T<:Tuple",href:"#MonitoredQuantumCircuits.execute-Union{Tuple{T}, Tuple{Function, Vector{T}, MonitoredQuantumCircuits.Simulator, MonitoredQuantumCircuits.Remote.Cluster}} where T<:Tuple"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.execute")],-1),bi=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(generateCircuit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, parameters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, backend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Simulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, cluster</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Remote.Cluster</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; ntasks_per_node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">48</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, partition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, email</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, account</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, time</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1:00:00&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, postProcessing</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;simulation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, max_nodes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {(T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Tuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)}</span></span></code></pre></div><p>Remotly execute multiple circuits in parallel. Each circuit should be generated by the the generateCircuit function give one entry of the parameters vector. The backend needs to be a subtype of Simulator. The cluster should have allready been initialized (see Remote).</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/circuit.jl#L157-L161" target="_blank" rel="noreferrer">source</a></p>',3),mi={class:"jldocstring custom-block",open:""},yi=i("a",{id:"MonitoredQuantumCircuits.isClifford-Tuple{FiniteDepthCircuit}",href:"#MonitoredQuantumCircuits.isClifford-Tuple{FiniteDepthCircuit}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.isClifford")],-1),Ei=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isClifford</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(circuit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FiniteDepthCircuit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Check if the circuit is a Clifford circuit, i.e. only contains Clifford operations. Returns true if all operations are Clifford operations, false otherwise.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/circuit.jl#L137-L142" target="_blank" rel="noreferrer">source</a></p>',3),Ti={class:"jldocstring custom-block",open:""},ji=i("a",{id:"MonitoredQuantumCircuits.isClifford-Tuple{MonitoredQuantumCircuits.Operation}",href:"#MonitoredQuantumCircuits.isClifford-Tuple{MonitoredQuantumCircuits.Operation}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.isClifford")],-1),Fi=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isClifford</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(operation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return whether the operation is a Clifford operation.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/operations.jl#L13-L17" target="_blank" rel="noreferrer">source</a></p>',3),fi={class:"jldocstring custom-block",open:""},Qi=i("a",{id:"MonitoredQuantumCircuits.isSimulator-Tuple{MonitoredQuantumCircuits.Backend}",href:"#MonitoredQuantumCircuits.isSimulator-Tuple{MonitoredQuantumCircuits.Backend}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.isSimulator")],-1),Mi=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isSimulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(backend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Backend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return whether the backend is a simulator.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/backend.jl#L5-L9" target="_blank" rel="noreferrer">source</a></p>',3),vi={class:"jldocstring custom-block",open:""},Ai=i("a",{id:"MonitoredQuantumCircuits.load-Tuple{String}",href:"#MonitoredQuantumCircuits.load-Tuple{String}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.load")],-1),Si=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Load a circuit from a file with the given name.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/circuit.jl#L230-L234" target="_blank" rel="noreferrer">source</a></p>',3),Di={class:"jldocstring custom-block",open:""},Bi=i("a",{id:"MonitoredQuantumCircuits.loadMany-Tuple{String}",href:"#MonitoredQuantumCircuits.loadMany-Tuple{String}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.loadMany")],-1),Ii=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loadMany</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Load all circuits from files in the given folder.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/circuit.jl#L239-L243" target="_blank" rel="noreferrer">source</a></p>',3),Li={class:"jldocstring custom-block",open:""},xi=i("a",{id:"MonitoredQuantumCircuits.nMeasurements-Tuple{FiniteDepthCircuit}",href:"#MonitoredQuantumCircuits.nMeasurements-Tuple{FiniteDepthCircuit}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.nMeasurements")],-1),Pi=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nMeasurements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(circuit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FiniteDepthCircuit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Get the number of measurements in the given circuit.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/circuit.jl#L249-L253" target="_blank" rel="noreferrer">source</a></p>',3),Vi={class:"jldocstring custom-block",open:""},Ri=i("a",{id:"MonitoredQuantumCircuits.nMeasurements-Tuple{MonitoredQuantumCircuits.MeasurementOperation}",href:"#MonitoredQuantumCircuits.nMeasurements-Tuple{MonitoredQuantumCircuits.MeasurementOperation}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.nMeasurements")],-1),Oi=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nMeasurements</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(operation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MeasurementOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return the number of measurements the operation performs.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/operations.jl#L43-L47" target="_blank" rel="noreferrer">source</a></p>',3),Ni={class:"jldocstring custom-block",open:""},wi=i("a",{id:"MonitoredQuantumCircuits.nQubits-Tuple{MonitoredQuantumCircuits.Lattice}",href:"#MonitoredQuantumCircuits.nQubits-Tuple{MonitoredQuantumCircuits.Lattice}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.nQubits")],-1),Ji=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nQubits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lattice</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Lattice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; countAncilla</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return the number of qubits in the lattice. If <code>countAncilla</code> is <code>true</code>, then ancilla qubits are included.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/lattice.jl#L12-L16" target="_blank" rel="noreferrer">source</a></p>',3),qi={class:"jldocstring custom-block",open:""},Xi=i("a",{id:"MonitoredQuantumCircuits.nQubits-Tuple{MonitoredQuantumCircuits.Operation}",href:"#MonitoredQuantumCircuits.nQubits-Tuple{MonitoredQuantumCircuits.Operation}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.nQubits")],-1),Yi=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nQubits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(operation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return the number of qubits the operation acts on.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/operations.jl#L5-L9" target="_blank" rel="noreferrer">source</a></p>',3),Hi={class:"jldocstring custom-block",open:""},Gi=i("a",{id:"MonitoredQuantumCircuits.save-Tuple{String, FiniteDepthCircuit}",href:"#MonitoredQuantumCircuits.save-Tuple{String, FiniteDepthCircuit}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.save")],-1),Zi=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">save</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, circuit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FiniteDepthCircuit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Save the given circuit to a file with the given name.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/circuit.jl#L221-L225" target="_blank" rel="noreferrer">source</a></p>',3),zi={class:"jldocstring custom-block",open:""},Ui=i("a",{id:"MonitoredQuantumCircuits.translate-Tuple{Type, FiniteDepthCircuit}",href:"#MonitoredQuantumCircuits.translate-Tuple{Type, FiniteDepthCircuit}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.translate")],-1),Wi=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">translate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, circuit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FiniteDepthCircuit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Translate a given circuit to a given backend representation type.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/circuit.jl#L212-L216" target="_blank" rel="noreferrer">source</a></p>',3),$i={class:"jldocstring custom-block",open:""},Ki=i("a",{id:"MonitoredQuantumCircuits.Qiskit.IBMBackend",href:"#MonitoredQuantumCircuits.Qiskit.IBMBackend"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Qiskit.IBMBackend")],-1),is=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">IBMBackend </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MonitoredQuantumCircuits.QuantumComputer</span></span></code></pre></div><p>A Qiskit backend that runs on IBM&#39;s quantum computers.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/Backends/Qiskit/IBMBackend.jl#L2-L6" target="_blank" rel="noreferrer">source</a></p>',3),ss={class:"jldocstring custom-block",open:""},ts=i("a",{id:"MonitoredQuantumCircuits.Qiskit.CliffordSimulator-Tuple{}",href:"#MonitoredQuantumCircuits.Qiskit.CliffordSimulator-Tuple{}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Qiskit.CliffordSimulator")],-1),es=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CliffordSimulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>A Qiskit Aer stabilizer simulator.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/Backends/Qiskit/Simulation.jl#L34-L38" target="_blank" rel="noreferrer">source</a></p>',3),as={class:"jldocstring custom-block",open:""},ns=i("a",{id:"MonitoredQuantumCircuits.Qiskit.GPUStateVectorSimulator-Tuple{}",href:"#MonitoredQuantumCircuits.Qiskit.GPUStateVectorSimulator-Tuple{}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Qiskit.GPUStateVectorSimulator")],-1),ls=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GPUStateVectorSimulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>A Qiskit Aer statevector simulator that runs on the GPU.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/Backends/Qiskit/Simulation.jl#L5-L9" target="_blank" rel="noreferrer">source</a></p>',3),os={class:"jldocstring custom-block",open:""},rs=i("a",{id:"MonitoredQuantumCircuits.Qiskit.GPUTensorNetworkSimulator-Tuple{}",href:"#MonitoredQuantumCircuits.Qiskit.GPUTensorNetworkSimulator-Tuple{}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Qiskit.GPUTensorNetworkSimulator")],-1),ps=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GPUTensorNetworkSimulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>A Qiskit Aer tensor network simulator that runs on the GPU.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/Backends/Qiskit/Simulation.jl#L44-L48" target="_blank" rel="noreferrer">source</a></p>',3),cs={class:"jldocstring custom-block",open:""},hs=i("a",{id:"MonitoredQuantumCircuits.Qiskit.StateVectorSimulator-Tuple{}",href:"#MonitoredQuantumCircuits.Qiskit.StateVectorSimulator-Tuple{}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Qiskit.StateVectorSimulator")],-1),ds=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">StateVectorSimulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>A Qiskit Aer statevector simulator.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/Backends/Qiskit/Simulation.jl#L21-L25" target="_blank" rel="noreferrer">source</a></p>',3),us={class:"jldocstring custom-block",open:""},ks=i("a",{id:"MonitoredQuantumCircuits.QuantumClifford.GPUPauliFrameSimulator",href:"#MonitoredQuantumCircuits.QuantumClifford.GPUPauliFrameSimulator"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.QuantumClifford.GPUPauliFrameSimulator")],-1),_s=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GPUPauliFrameSimulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>A QuantumClifford stabilizer Pauli frame simulator that runs on the GPU.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/Backends/QuantumClifford/Simulation.jl#L17-L21" target="_blank" rel="noreferrer">source</a></p>',3),gs={class:"jldocstring custom-block",open:""},Cs=i("a",{id:"MonitoredQuantumCircuits.QuantumClifford.PauliFrameSimulator",href:"#MonitoredQuantumCircuits.QuantumClifford.PauliFrameSimulator"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.QuantumClifford.PauliFrameSimulator")],-1),bs=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PauliFrameSimulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>A QuantumClifford stabilizer Pauli frame simulator.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/Backends/QuantumClifford/Simulation.jl#L9-L13" target="_blank" rel="noreferrer">source</a></p>',3),ms={class:"jldocstring custom-block",open:""},ys=i("a",{id:"MonitoredQuantumCircuits.QuantumClifford.TableauSimulator",href:"#MonitoredQuantumCircuits.QuantumClifford.TableauSimulator"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.QuantumClifford.TableauSimulator")],-1),Es=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TableauSimulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>A QuantumClifford stabilizer simulator.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/Backends/QuantumClifford/Simulation.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3),Ts={class:"jldocstring custom-block",open:""},js=i("a",{id:"MonitoredQuantumCircuits.QuantumClifford.tmi-Tuple{QuantumClifford.AbstractStabilizer, Any, Any, Any}",href:"#MonitoredQuantumCircuits.QuantumClifford.tmi-Tuple{QuantumClifford.AbstractStabilizer, Any, Any, Any}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.QuantumClifford.tmi")],-1),Fs=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tmi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractStabilizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, A, B, C)</span></span></code></pre></div><p>Calculate the tripartite mutual information of a stabilizer state from QuantumClifford.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/Backends/QuantumClifford/analysis.jl#L1-L5" target="_blank" rel="noreferrer">source</a></p>',3),fs={class:"jldocstring custom-block",open:""},Qs=i("a",{id:"MonitoredQuantumCircuits.GUI.CircuitComposer!-Tuple{FiniteDepthCircuit}",href:"#MonitoredQuantumCircuits.GUI.CircuitComposer!-Tuple{FiniteDepthCircuit}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.GUI.CircuitComposer!")],-1),Ms=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CircuitComposer!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(circuit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FiniteDepthCircuit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Launch a GUI to visually compose and edit a quantum circuit.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/GUI/BonitoApp.jl#L17-L21" target="_blank" rel="noreferrer">source</a></p>',3),vs={class:"jldocstring custom-block",open:""},As=i("a",{id:"MonitoredQuantumCircuits.Remote.addCluster-Tuple{String, String, String}",href:"#MonitoredQuantumCircuits.Remote.addCluster-Tuple{String, String, String}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Remote.addCluster")],-1),Ss=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addCluster</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, host_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, identity_file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; ssh_password</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, remote_password</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, workingDir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, load_juliaANDmpi_cmd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, MPI_use_system_binary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Add a cluster to the list of clusters. The cluster will be saved in the file remotes.csv in the current directory. The cluster will be connected to and setup. The cluster will be disconnected after the setup.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/Remote/Remote.jl#L20-L24" target="_blank" rel="noreferrer">source</a></p>',3),Ds={class:"jldocstring custom-block",open:""},Bs=i("a",{id:"MonitoredQuantumCircuits.Remote.disconnect-Tuple{MonitoredQuantumCircuits.Remote.Cluster}",href:"#MonitoredQuantumCircuits.Remote.disconnect-Tuple{MonitoredQuantumCircuits.Remote.Cluster}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Remote.disconnect")],-1),Is=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">disconnect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cluster</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Cluster</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Disconnect from the cluster.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/Remote/Remote.jl#L263-L267" target="_blank" rel="noreferrer">source</a></p>',3),Ls={class:"jldocstring custom-block",open:""},xs=i("a",{id:"MonitoredQuantumCircuits.Remote.downloadResults-Tuple{MonitoredQuantumCircuits.Remote.Cluster, String}",href:"#MonitoredQuantumCircuits.Remote.downloadResults-Tuple{MonitoredQuantumCircuits.Remote.Cluster, String}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Remote.downloadResults")],-1),Ps=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">downloadResults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cluster</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Cluster</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; destination</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Download the results of a job with the id <code>id</code> from the cluster.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/Remote/Remote.jl#L219-L223" target="_blank" rel="noreferrer">source</a></p>',3),Vs={class:"jldocstring custom-block",open:""},Rs=i("a",{id:"MonitoredQuantumCircuits.Remote.getQueue-Tuple{MonitoredQuantumCircuits.Remote.Cluster}",href:"#MonitoredQuantumCircuits.Remote.getQueue-Tuple{MonitoredQuantumCircuits.Remote.Cluster}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Remote.getQueue")],-1),Os=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cluster</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Cluster</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Get your queued jobs on the cluster (i.e. squeue -u).</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/Remote/Remote.jl#L185-L189" target="_blank" rel="noreferrer">source</a></p>',3),Ns={class:"jldocstring custom-block",open:""},ws=i("a",{id:"MonitoredQuantumCircuits.Remote.loadCluster-Tuple{String}",href:"#MonitoredQuantumCircuits.Remote.loadCluster-Tuple{String}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Remote.loadCluster")],-1),Js=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loadCluster</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(host_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loadCluster</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Load a cluster from the list of clusters. The cluster will be loaded from the file remotes.csv in the current directory.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/Remote/Remote.jl#L56-L61" target="_blank" rel="noreferrer">source</a></p>`,3),qs={class:"jldocstring custom-block",open:""},Xs=i("a",{id:"MonitoredQuantumCircuits.Remote.showClusters-Tuple{}",href:"#MonitoredQuantumCircuits.Remote.showClusters-Tuple{}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Remote.showClusters")],-1),Ys=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">showClusters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Show all clusters that have been added.</p><p><a href="https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/85ccfd8cc2a8d5003c82bd1bed71d21c88bd67e8/src/Remote/Remote.jl#L105-L109" target="_blank" rel="noreferrer">source</a></p>',3);function Hs(Gs,Zs,zs,Us,Ws,$s){const s=r("Badge");return o(),l("div",null,[i("details",c,[i("summary",null,[h,t(),e(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),d]),i("details",u,[i("summary",null,[k,t(),e(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),_]),i("details",g,[i("summary",null,[C,t(),e(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),b]),i("details",m,[i("summary",null,[y,t(),e(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),E]),i("details",T,[i("summary",null,[j,t(),e(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),F]),i("details",f,[i("summary",null,[Q,t(),e(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),M]),i("details",v,[i("summary",null,[A,t(),e(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),S]),i("details",D,[i("summary",null,[B,t(),e(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),I]),i("details",L,[i("summary",null,[x,t(),e(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),P]),i("details",V,[i("summary",null,[R,t(),e(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),O]),i("details",N,[i("summary",null,[w,t(),e(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),J]),i("details",q,[i("summary",null,[X,t(),e(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),Y]),i("details",H,[i("summary",null,[G,t(),e(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),Z]),i("details",z,[i("summary",null,[U,t(),e(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),W]),i("details",$,[i("summary",null,[K,t(),e(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),ii]),i("details",si,[i("summary",null,[ti,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),ei]),i("details",ai,[i("summary",null,[ni,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),li]),i("details",oi,[i("summary",null,[ri,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),pi]),i("details",ci,[i("summary",null,[hi,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),di]),i("details",ui,[i("summary",null,[ki,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),_i]),i("details",gi,[i("summary",null,[Ci,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),bi]),i("details",mi,[i("summary",null,[yi,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Ei]),i("details",Ti,[i("summary",null,[ji,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Fi]),i("details",fi,[i("summary",null,[Qi,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Mi]),i("details",vi,[i("summary",null,[Ai,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Si]),i("details",Di,[i("summary",null,[Bi,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Ii]),i("details",Li,[i("summary",null,[xi,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Pi]),i("details",Vi,[i("summary",null,[Ri,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Oi]),i("details",Ni,[i("summary",null,[wi,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Ji]),i("details",qi,[i("summary",null,[Xi,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Yi]),i("details",Hi,[i("summary",null,[Gi,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Zi]),i("details",zi,[i("summary",null,[Ui,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Wi]),i("details",$i,[i("summary",null,[Ki,t(),e(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),is]),i("details",ss,[i("summary",null,[ts,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),es]),i("details",as,[i("summary",null,[ns,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),ls]),i("details",os,[i("summary",null,[rs,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),ps]),i("details",cs,[i("summary",null,[hs,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),ds]),i("details",us,[i("summary",null,[ks,t(),e(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),_s]),i("details",gs,[i("summary",null,[Cs,t(),e(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),bs]),i("details",ms,[i("summary",null,[ys,t(),e(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),Es]),i("details",Ts,[i("summary",null,[js,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Fs]),i("details",fs,[i("summary",null,[Qs,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Ms]),i("details",vs,[i("summary",null,[As,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Ss]),i("details",Ds,[i("summary",null,[Bs,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Is]),i("details",Ls,[i("summary",null,[xs,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Ps]),i("details",Vs,[i("summary",null,[Rs,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Os]),i("details",Ns,[i("summary",null,[ws,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Js]),i("details",qs,[i("summary",null,[Xs,t(),e(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Ys])])}const st=n(p,[["render",Hs]]);export{it as __pageData,st as default};

import{_ as i,c as e,o as s,a7 as t}from"./chunks/framework.BlNHQ1cX.js";const k=JSON.parse('{"title":"Circuits","description":"","frontmatter":{},"headers":[],"relativePath":"library/circuits.md","filePath":"library/circuits.md","lastUpdated":null}'),a={name:"library/circuits.md"},n=t('<h1 id="Circuits" tabindex="-1">Circuits <a class="header-anchor" href="#Circuits" aria-label="Permalink to &quot;Circuits {#Circuits}&quot;">​</a></h1><p>A <strong>circuit</strong> represents a sequence of operations applied to the qubits in a given geometry. More precisely, a circuit is a temporally ordered list of operations. Operations may range from simple quantum gates and measurements to more complex procedures, such as randomly distributed gates; see the <a href="/MonitoredQuantumCircuits.jl/dev/library/operations">operations</a> documentation for details.</p><p>Each circuit is defined on a specific geometry, which determines the arrangement and connectivity of qubits (typically represented as a graph). Operations can only be applied to qubits that are connected within the chosen geometry. For further information, refer to the <a href="/MonitoredQuantumCircuits.jl/dev/library/geometries">Geometries</a> documentation.</p><p>Circuits are implemented as mutable structs, allowing for flexible construction and modification. This enables users to build circuits incrementally by adding operations as needed.</p><h1 id="Circuit-Construction" tabindex="-1">Circuit Construction <a class="header-anchor" href="#Circuit-Construction" aria-label="Permalink to &quot;Circuit Construction {#Circuit-Construction}&quot;">​</a></h1><p>To create an empty circuit, use the following constructor:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">circuit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Circuit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geometry)</span></span></code></pre></div><p>You may then iteratively apply operations:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">apply!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(circuit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Circuit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, operation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, position</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vararg{Integer}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Additional methods for <code>apply!</code> are available, enabling the application of more complex operations, such as random quantum gates with specified distributions. See the <a href="/MonitoredQuantumCircuits.jl/dev/library/operations">operations</a> documentation for further details.</p><p>In the future, circuits may also be constructed using a graphical user interface. To launch the <a href="/MonitoredQuantumCircuits.jl/dev/modules/gui">Graphical User Interface</a> (GUI, work in progress):</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GUI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">circuitComposer!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(circuit)</span></span></code></pre></div><h2 id="Compiling-Circuits" tabindex="-1">Compiling Circuits <a class="header-anchor" href="#Compiling-Circuits" aria-label="Permalink to &quot;Compiling Circuits {#Compiling-Circuits}&quot;">​</a></h2><p>To improve performance, circuits should be compiled. This process optimizes the circuit for execution. To compile a circuit, use the following command:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">compile!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(circuit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Circuit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>This command will return a compiled circuit, which can be executed on a selected backend.</p><h2 id="Predefined-Circuits" tabindex="-1">Predefined Circuits <a class="header-anchor" href="#Predefined-Circuits" aria-label="Permalink to &quot;Predefined Circuits {#Predefined-Circuits}&quot;">​</a></h2><p>MonitoredQuantumCircuits.jl provides several predefined circuits, which can be constructed using the appropriate functions. In accordance with Julia&#39;s multiple dispatch paradigm, these functions are only available for geometries supported by the respective circuit.</p><p>Currently, the following circuit construction functions are provided:</p><ul><li><p><strong>MonitoredTransverseFieldIsing</strong><br> Monitored quantum circuit version of the transverse field Ising model, supported on chain geometries.</p></li><li><p><strong>MeasurementOnlyKitaev</strong><br> Measurement-only Kitaev model circuit, supported on honeycomb geometries.</p></li><li><p><strong>MeasurementOnlyKekule</strong><br> Measurement-only Kekule model circuit, supported on honeycomb geometries.</p></li><li><p><strong>MeasurementOnlyKekule_Floquet</strong> Measurement-only Kekule model circuit with Floquet time evolution, supported on honeycomb geometries.</p></li><li><p><strong>MeasurementOnlyShastrySutherland</strong><br> Measurement-only Shastry-Sutherland model circuit, supported on Shastry-Sutherland geometries.</p></li></ul><h2 id="Executing-Circuits" tabindex="-1">Executing Circuits <a class="header-anchor" href="#Executing-Circuits" aria-label="Permalink to &quot;Executing Circuits {#Executing-Circuits}&quot;">​</a></h2><p>To execute a compiled circuit, use the following command:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">execute!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(circuit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Circuit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, backend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Backend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>This command will run the circuit on the specified backend and return the results in a format native to the backend.</p><hr><h2 id="API-Reference" tabindex="-1">API Reference <a class="header-anchor" href="#API-Reference" aria-label="Permalink to &quot;API Reference {#API-Reference}&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">Missing docstring.</p><p>Missing docstring for <code>MonitoredTransverseFieldIsing</code>. Check Documenter&#39;s build log for details.</p></div><div class="warning custom-block"><p class="custom-block-title">Missing docstring.</p><p>Missing docstring for <code>MeasurementOnlyKitaev</code>. Check Documenter&#39;s build log for details.</p></div><div class="warning custom-block"><p class="custom-block-title">Missing docstring.</p><p>Missing docstring for <code>MeasurementOnlyKekule</code>. Check Documenter&#39;s build log for details.</p></div><div class="warning custom-block"><p class="custom-block-title">Missing docstring.</p><p>Missing docstring for <code>MeasurementOnlyKekule_Floquet</code>. Check Documenter&#39;s build log for details.</p></div><div class="warning custom-block"><p class="custom-block-title">Missing docstring.</p><p>Missing docstring for <code>MeasurementOnlyShastrySutherland</code>. Check Documenter&#39;s build log for details.</p></div>',31),r=[n];function o(c,l,p,d,u,h){return s(),e("div",null,r)}const m=i(a,[["render",o]]);export{k as __pageData,m as default};

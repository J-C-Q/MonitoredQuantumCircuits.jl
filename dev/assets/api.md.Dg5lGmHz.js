import{_ as l,c as o,j as i,a as e,I as t,w as a,a7 as n,D as r,o as p}from"./chunks/framework.BlNHQ1cX.js";const ce=JSON.parse('{"title":"Public API","description":"","frontmatter":{},"headers":[],"relativePath":"api.md","filePath":"api.md","lastUpdated":null}'),h={name:"api.md"},c=i("h1",{id:"Public-API",tabindex:"-1"},[e("Public API "),i("a",{class:"header-anchor",href:"#Public-API","aria-label":'Permalink to "Public API {#Public-API}"'},"​")],-1),u=i("h3",{id:"MonitoredQuantumCircuits",tabindex:"-1"},[e("MonitoredQuantumCircuits "),i("a",{class:"header-anchor",href:"#MonitoredQuantumCircuits","aria-label":'Permalink to "MonitoredQuantumCircuits {#MonitoredQuantumCircuits}"'},"​")],-1),d={class:"jldocstring custom-block",open:""},k=i("a",{id:"MonitoredQuantumCircuits.CNOT",href:"#MonitoredQuantumCircuits.CNOT"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.CNOT")],-1),_=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CNOT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Operation</span></span></code></pre></div><p>The CNOT operation is a two-qubit gate that flips the target qubit if the control qubit is in the |1⟩ state.</p>',2),b=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/operations/CNOT.jl#L1-L5",target:"_blank",rel:"noreferrer"},"source",-1),g={class:"jldocstring custom-block",open:""},C=i("a",{id:"MonitoredQuantumCircuits.ChainGeometry",href:"#MonitoredQuantumCircuits.ChainGeometry"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.ChainGeometry")],-1),m=n(`<p>A data structure representing a one-dimensional chain geometry of qubits.</p><p><strong>Constructors</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ChainGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Periodic, size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Constructs a chain geometry with periodic boundary conditions (i.e., a closed loop).</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ChainGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Open, size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Constructs a chain geometry with open boundary conditions (i.e., a linear chain).</p><p><strong>Arguments</strong></p><ul><li><code>size::Integer</code>: The number of qubits in the chain.</li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create a chain of 8 qubits with periodic boundaries</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">geometry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ChainGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Periodic, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create a chain of 10 qubits with open boundaries</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">geometry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ChainGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Open, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,10),y=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/geometries/ChainGeometry.jl#L1-L27",target:"_blank",rel:"noreferrer"},"source",-1),f={class:"jldocstring custom-block",open:""},E=i("a",{id:"MonitoredQuantumCircuits.Circuit",href:"#MonitoredQuantumCircuits.Circuit"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Circuit")],-1),T=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Circuit{G</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Geometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>A circuit optimized for interactive construction. The operations are stored in a vector to allow for efficient construction.</p>',2),j=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/circuit.jl#L27-L30",target:"_blank",rel:"noreferrer"},"source",-1),Q={class:"jldocstring custom-block",open:""},F=i("a",{id:"MonitoredQuantumCircuits.CompiledCircuit",href:"#MonitoredQuantumCircuits.CompiledCircuit"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.CompiledCircuit")],-1),M=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CompiledCircuit{Ops</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>A circuit optimized for iteration. The operations are stored in a tuple. The operations are stored in a tuple to allow for efficient iteration.</p>',2),A=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/circuit.jl#L130-L133",target:"_blank",rel:"noreferrer"},"source",-1),v={class:"jldocstring custom-block",open:""},S=i("a",{id:"MonitoredQuantumCircuits.DistributedOperation",href:"#MonitoredQuantumCircuits.DistributedOperation"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.DistributedOperation")],-1),x=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DistributedOperation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Operation</span></span></code></pre></div><p>An operation that applies a specified operation at multiple positions with given probabilities.</p>',2),B=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/operations/Distributed.jl#L1-L5",target:"_blank",rel:"noreferrer"},"source",-1),D={class:"jldocstring custom-block",open:""},P=i("a",{id:"MonitoredQuantumCircuits.Geometry",href:"#MonitoredQuantumCircuits.Geometry"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Geometry")],-1),I=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Geometry</span></span></code></pre></div><p>Abstract type for the geometry of the qubits.</p>',2),O=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/geometry.jl#L2-L6",target:"_blank",rel:"noreferrer"},"source",-1),V={class:"jldocstring custom-block",open:""},L=i("a",{id:"MonitoredQuantumCircuits.H",href:"#MonitoredQuantumCircuits.H"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.H")],-1),R=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Operation</span></span></code></pre></div><p>The H operation is a single-qubit gate that creates superposition by applying a Hadamard transformation.</p>',2),q=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/operations/H.jl#L1-L5",target:"_blank",rel:"noreferrer"},"source",-1),N={class:"jldocstring custom-block",open:""},Y=i("a",{id:"MonitoredQuantumCircuits.HoneycombGeometry",href:"#MonitoredQuantumCircuits.HoneycombGeometry"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.HoneycombGeometry")],-1),w=n(`<p>A data structure representing a honeycomb lattice geometry.</p><p><strong>Constructors</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HoneycombGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Periodic, sizeX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sizeY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Create a honeycomb geometry with periodic boundary conditions.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HoneycombGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Open, sizeX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sizeY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Create a honeycomb geometry with open boundary conditions.</p><p><strong>Arguments</strong></p><ul><li><p><code>sizeX::Integer</code>: Width of the lattice</p></li><li><p><code>sizeY::Integer</code>: Height of the lattice (must be even)</p></li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create a 4×4 honeycomb lattice with periodic boundaries</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">geometry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> HoneycombGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Periodic, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create a 6×6 honeycomb lattice with open boundaries</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">geometry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> HoneycombGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Open, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,10),X=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/geometries/HoneycombLattice.jl#L1-L28",target:"_blank",rel:"noreferrer"},"source",-1),Z={class:"jldocstring custom-block",open:""},J=i("a",{id:"MonitoredQuantumCircuits.I",href:"#MonitoredQuantumCircuits.I"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.I")],-1),G=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">I</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Operation</span></span></code></pre></div><p>The I operation is a single-qubit gate that represents the identity operation, leaving the qubit unchanged.</p>',2),z=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/operations/I.jl#L1-L5",target:"_blank",rel:"noreferrer"},"source",-1),W={class:"jldocstring custom-block",open:""},H=i("a",{id:"MonitoredQuantumCircuits.Measure_X",href:"#MonitoredQuantumCircuits.Measure_X"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Measure_X")],-1),U=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Measure_X</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Operation</span></span></code></pre></div><p>The Measure_X operation is a single-qubit measurement operation that measures the state of a qubit in the X basis.</p>',2),$=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/operations/Measure_X.jl#L1-L5",target:"_blank",rel:"noreferrer"},"source",-1),K={class:"jldocstring custom-block",open:""},ii=i("a",{id:"MonitoredQuantumCircuits.Measure_Y",href:"#MonitoredQuantumCircuits.Measure_Y"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Measure_Y")],-1),si=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Measure_Y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Operation</span></span></code></pre></div><p>The Measure_Y operation is a single-qubit measurement operation that measures the state of a qubit in the Y basis.</p>',2),ti=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/operations/Measure_Y.jl#L1-L5",target:"_blank",rel:"noreferrer"},"source",-1),ei={class:"jldocstring custom-block",open:""},ai=i("a",{id:"MonitoredQuantumCircuits.Measure_Z",href:"#MonitoredQuantumCircuits.Measure_Z"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Measure_Z")],-1),ni=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Measure_Z</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Operation</span></span></code></pre></div><p>The Measure_Z operation is a single-qubit measurement operation that measures the state of a qubit in the Z basis.</p>',2),li=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/operations/Measure_Z.jl#L1-L5",target:"_blank",rel:"noreferrer"},"source",-1),oi={class:"jldocstring custom-block",open:""},ri=i("a",{id:"MonitoredQuantumCircuits.NPauli",href:"#MonitoredQuantumCircuits.NPauli"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.NPauli")],-1),pi=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NPauli{N} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MeasurementOperation</span></span></code></pre></div><p>The NPauli operation is a N-qubit measurement operation that measures the state of multiple qubits in the Pauli basis.</p>',2),hi=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/operations/Pauli.jl#L1-L5",target:"_blank",rel:"noreferrer"},"source",-1),ci={class:"jldocstring custom-block",open:""},ui=i("a",{id:"MonitoredQuantumCircuits.RandomOperation",href:"#MonitoredQuantumCircuits.RandomOperation"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.RandomOperation")],-1),di=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RandomOperation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Operation</span></span></code></pre></div><p>An operation that applies a random operation from a list of operations with specified probabilities and random positions.</p>',2),ki=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/operations/Random.jl#L1-L5",target:"_blank",rel:"noreferrer"},"source",-1),_i={class:"jldocstring custom-block",open:""},bi=i("a",{id:"MonitoredQuantumCircuits.ShastrySutherlandGeometry",href:"#MonitoredQuantumCircuits.ShastrySutherlandGeometry"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.ShastrySutherlandGeometry")],-1),gi=n(`<p>A data structure representing a Shastry-Sutherland lattice geometry.</p><p><strong>Constructors</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ShastrySutherlandGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Periodic, sizeX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sizeY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Construct a Shastry-Sutherland geometry with periodic boundary conditions.</p><p><strong>Arguments</strong></p><ul><li><p><code>sizeX::Integer</code>: The number of sites in the x direction</p></li><li><p><code>sizeY::Integer</code>: The number of sites in the y direction</p></li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create a 4×4 Shastry-Sutherland lattice with periodic boundaries</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">geometry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ShastrySutherlandGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Periodic, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,8),Ci=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/geometries/ShastrySutherlandGeometry.jl#L1-L21",target:"_blank",rel:"noreferrer"},"source",-1),mi={class:"jldocstring custom-block",open:""},yi=i("a",{id:"MonitoredQuantumCircuits.Weak_XX",href:"#MonitoredQuantumCircuits.Weak_XX"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Weak_XX")],-1),fi=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Weak_XX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MeasurementOperation</span></span></code></pre></div><p>The Weak_XX operation is a three-qubit gate that applies a weak XX interaction between the first two qubits, with a strength determined by the parameter t. The third qubit is an ancilla qubit that is used to store the result of the operation.</p>',2),Ei=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/operations/Weak_XX.jl#L1-L5",target:"_blank",rel:"noreferrer"},"source",-1),Ti={class:"jldocstring custom-block",open:""},ji=i("a",{id:"MonitoredQuantumCircuits.Weak_YY",href:"#MonitoredQuantumCircuits.Weak_YY"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Weak_YY")],-1),Qi=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Weak_YY </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MeasurementOperation</span></span></code></pre></div><p>The Weak_YY operation is a three-qubit gate that applies a weak YY interaction between the first two qubits, with a strength determined by the parameter t. The third qubit is an ancilla qubit that is used to store the result of the operation.</p>',2),Fi=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/operations/Weak_YY.jl#L1-L5",target:"_blank",rel:"noreferrer"},"source",-1),Mi={class:"jldocstring custom-block",open:""},Ai=i("a",{id:"MonitoredQuantumCircuits.Weak_ZZ",href:"#MonitoredQuantumCircuits.Weak_ZZ"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Weak_ZZ")],-1),vi=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Weak_ZZ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MeasurementOperation</span></span></code></pre></div><p>The Weak_ZZ operation is a three-qubit gate that applies a weak ZZ interaction between the first two qubits, with a strength determined by the parameter t. The third qubit is an ancilla qubit that is used to store the result of the operation.</p>',2),Si=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/operations/Weak_ZZ.jl#L1-L5",target:"_blank",rel:"noreferrer"},"source",-1),xi={class:"jldocstring custom-block",open:""},Bi=i("a",{id:"MonitoredQuantumCircuits.X",href:"#MonitoredQuantumCircuits.X"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.X")],-1),Di=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">X</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Operation</span></span></code></pre></div><p>The X operation is a single-qubit gate that flips the state of a qubit.</p>',2),Pi=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/operations/X.jl#L1-L5",target:"_blank",rel:"noreferrer"},"source",-1),Ii={class:"jldocstring custom-block",open:""},Oi=i("a",{id:"MonitoredQuantumCircuits.XX",href:"#MonitoredQuantumCircuits.XX"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.XX")],-1),Vi=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">XX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MeasurementOperation</span></span></code></pre></div><p>The XX operation is a two-qubit gate that applies an XX interaction between the two qubits. It is a type of measurement operation that can be used in quantum circuits.</p>',2),Li=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/operations/XX.jl#L1-L5",target:"_blank",rel:"noreferrer"},"source",-1),Ri={class:"jldocstring custom-block",open:""},qi=i("a",{id:"MonitoredQuantumCircuits.Y",href:"#MonitoredQuantumCircuits.Y"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Y")],-1),Ni=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Operation</span></span></code></pre></div><p>The Y operation is a single-qubit gate that applies a phase of π to the |1⟩ state.</p>',2),Yi=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/operations/Y.jl#L1-L5",target:"_blank",rel:"noreferrer"},"source",-1),wi={class:"jldocstring custom-block",open:""},Xi=i("a",{id:"MonitoredQuantumCircuits.YY",href:"#MonitoredQuantumCircuits.YY"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.YY")],-1),Zi=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">YY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MeasurementOperation</span></span></code></pre></div><p>The YY operation is a two-qubit gate that applies a YY interaction between the two qubits. The operation is used to measure the state of the qubits in the YY basis.</p>',2),Ji=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/operations/YY.jl#L1-L5",target:"_blank",rel:"noreferrer"},"source",-1),Gi={class:"jldocstring custom-block",open:""},zi=i("a",{id:"MonitoredQuantumCircuits.Z",href:"#MonitoredQuantumCircuits.Z"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Z")],-1),Wi=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Z</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Operation</span></span></code></pre></div><p>The Z operation is a single-qubit gate that applies a phase of π to the |1⟩ state.</p>',2),Hi=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/operations/Z.jl#L1-L5",target:"_blank",rel:"noreferrer"},"source",-1),Ui={class:"jldocstring custom-block",open:""},$i=i("a",{id:"MonitoredQuantumCircuits.ZZ",href:"#MonitoredQuantumCircuits.ZZ"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.ZZ")],-1),Ki=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ZZ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MeasurementOperation</span></span></code></pre></div><p>The ZZ operation is a two-qubit measurement operation that measures the state of two qubits in the ZZ basis. The first qubit is the target qubit, and the second qubit is an ancilla qubit that is used to store the result of the operation.</p>',2),is=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/operations/ZZ.jl#L1-L5",target:"_blank",rel:"noreferrer"},"source",-1),ss={class:"jldocstring custom-block",open:""},ts=i("a",{id:"Base.push!-Tuple{RandomOperation, MonitoredQuantumCircuits.Operation, Matrix}",href:"#Base.push!-Tuple{RandomOperation, MonitoredQuantumCircuits.Operation, Matrix}"},[i("span",{class:"jlbinding"},"Base.push!")],-1),es=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">push!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(random</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RandomOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    op</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    positions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    probability,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    positionProbabilities)</span></span></code></pre></div><p>Push a new operation to the list of operations in the <code>RandomOperation</code> object. The operation is applied with a specified probability and the positions are given as a matrix. The <code>positionProbabilities</code> argument specifies the probabilities for each position (column) in the matrix.</p>`,2),as=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/operations/Random.jl#L20-L30",target:"_blank",rel:"noreferrer"},"source",-1),ns={class:"jldocstring custom-block",open:""},ls=i("a",{id:"MonitoredQuantumCircuits.apply!-Tuple{Circuit, DistributedOperation}",href:"#MonitoredQuantumCircuits.apply!-Tuple{Circuit, DistributedOperation}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.apply!")],-1),os=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">apply!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(circuit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Circuit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, operation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DistributedOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Apply a [<code>DistributedOperation</code>] to the circuit.</p>',2),rs=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/circuit.jl#L110-L114",target:"_blank",rel:"noreferrer"},"source",-1),ps={class:"jldocstring custom-block",open:""},hs=i("a",{id:"MonitoredQuantumCircuits.apply!-Tuple{Circuit, Integer}",href:"#MonitoredQuantumCircuits.apply!-Tuple{Circuit, Integer}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.apply!")],-1),cs=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">apply!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(circuit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Circuit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Apply the i-th operation in the circuit again.</p>',2),us=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/circuit.jl#L92-L96",target:"_blank",rel:"noreferrer"},"source",-1),ds={class:"jldocstring custom-block",open:""},ks=i("a",{id:"MonitoredQuantumCircuits.apply!-Tuple{Circuit, MonitoredQuantumCircuits.Operation, Vararg{Integer}}",href:"#MonitoredQuantumCircuits.apply!-Tuple{Circuit, MonitoredQuantumCircuits.Operation, Vararg{Integer}}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.apply!")],-1),_s=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">apply!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(circuit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Circuit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, operation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, position</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Apply an operation to a position in the circuit.</p>',2),bs=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/circuit.jl#L53-L56",target:"_blank",rel:"noreferrer"},"source",-1),gs={class:"jldocstring custom-block",open:""},Cs=i("a",{id:"MonitoredQuantumCircuits.apply!-Tuple{Circuit, RandomOperation}",href:"#MonitoredQuantumCircuits.apply!-Tuple{Circuit, RandomOperation}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.apply!")],-1),ms=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">apply!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(circuit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Circuit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, operation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RandomOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Apply a [<code>RandomOperation</code>] to the circuit.</p>',2),ys=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/circuit.jl#L101-L105",target:"_blank",rel:"noreferrer"},"source",-1),fs={class:"jldocstring custom-block",open:""},Es=i("a",{id:"MonitoredQuantumCircuits.compile-Tuple{Circuit}",href:"#MonitoredQuantumCircuits.compile-Tuple{Circuit}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.compile")],-1),Ts=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(circuit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Circuit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compile the circuit. The function will return a CompiledCircuit object. The CompiledCircuit object is optimized for iteration and is not meant to be modified. The execute function only accepts CompiledCircuit objects.</p>',2),js=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/circuit.jl#L212-L215",target:"_blank",rel:"noreferrer"},"source",-1),Qs={class:"jldocstring custom-block",open:""},Fs=i("a",{id:"MonitoredQuantumCircuits.depth-Tuple{MonitoredQuantumCircuits.CompiledCircuit}",href:"#MonitoredQuantumCircuits.depth-Tuple{MonitoredQuantumCircuits.CompiledCircuit}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.depth")],-1),Ms=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">depth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(circuit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">QuantumCircuit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return the depth of the circuit. The depth is the number of instructions in the circuit.</p>',2),As=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/circuit.jl#L353-L357",target:"_blank",rel:"noreferrer"},"source",-1),vs={class:"jldocstring custom-block",open:""},Ss=i("a",{id:"MonitoredQuantumCircuits.execute-Tuple{MonitoredQuantumCircuits.CompiledCircuit, MonitoredQuantumCircuits.Backend}",href:"#MonitoredQuantumCircuits.execute-Tuple{MonitoredQuantumCircuits.CompiledCircuit, MonitoredQuantumCircuits.Backend}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.execute")],-1),xs=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(circuit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CompiledCircuit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, backend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Backend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Execute the circuit on the given backend. The backend must be a subclass of Backend. The function will return the result of the execution.</p>',2),Bs=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/circuit.jl#L312-L316",target:"_blank",rel:"noreferrer"},"source",-1),Ds={class:"jldocstring custom-block",open:""},Ps=i("a",{id:"MonitoredQuantumCircuits.isClifford-Tuple{MonitoredQuantumCircuits.Operation}",href:"#MonitoredQuantumCircuits.isClifford-Tuple{MonitoredQuantumCircuits.Operation}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.isClifford")],-1),Is=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isClifford</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(operation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return whether the operation is a Clifford operation.</p>',2),Os=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/operations.jl#L13-L17",target:"_blank",rel:"noreferrer"},"source",-1),Vs={class:"jldocstring custom-block",open:""},Ls=i("a",{id:"MonitoredQuantumCircuits.isSimulator-Tuple{MonitoredQuantumCircuits.Backend}",href:"#MonitoredQuantumCircuits.isSimulator-Tuple{MonitoredQuantumCircuits.Backend}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.isSimulator")],-1),Rs=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isSimulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(backend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Backend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return whether the backend is a simulator.</p>',2),qs=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/backend.jl#L5-L9",target:"_blank",rel:"noreferrer"},"source",-1),Ns={class:"jldocstring custom-block",open:""},Ys=i("a",{id:"MonitoredQuantumCircuits.nAncilla-Tuple{MonitoredQuantumCircuits.CompiledCircuit}",href:"#MonitoredQuantumCircuits.nAncilla-Tuple{MonitoredQuantumCircuits.CompiledCircuit}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.nAncilla")],-1),ws=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nAncilla</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(circuit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CompiledCircuit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return the number of ancilla qubits in the compiled circuit. An ancilla qubits gets added for every unique combination of position and operation.</p>',2),Xs=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/circuit.jl#L231-L235",target:"_blank",rel:"noreferrer"},"source",-1),Zs={class:"jldocstring custom-block",open:""},Js=i("a",{id:"MonitoredQuantumCircuits.nQubits-Tuple{MonitoredQuantumCircuits.CompiledCircuit}",href:"#MonitoredQuantumCircuits.nQubits-Tuple{MonitoredQuantumCircuits.CompiledCircuit}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.nQubits")],-1),Gs=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nQubits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(circuit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CompiledCircuit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return the number of qubits in the compiled circuit. This can differ from the number of qubits in the original circuit, since unused qubits get deleated during compilation. Ancilla qubits are not included, use <code>nAncilla</code> to get the number of ancilla qubits.</p>',2),zs=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/circuit.jl#L222-L226",target:"_blank",rel:"noreferrer"},"source",-1),Ws={class:"jldocstring custom-block",open:""},Hs=i("a",{id:"MonitoredQuantumCircuits.nQubits-Tuple{MonitoredQuantumCircuits.Geometry}",href:"#MonitoredQuantumCircuits.nQubits-Tuple{MonitoredQuantumCircuits.Geometry}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.nQubits")],-1),Us=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nQubits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geometry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Geometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return the number of qubits in the geometry.</p>',2),$s=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/geometry.jl#L21-L25",target:"_blank",rel:"noreferrer"},"source",-1),Ks={class:"jldocstring custom-block",open:""},it=i("a",{id:"MonitoredQuantumCircuits.nQubits-Tuple{MonitoredQuantumCircuits.Operation}",href:"#MonitoredQuantumCircuits.nQubits-Tuple{MonitoredQuantumCircuits.Operation}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.nQubits")],-1),st=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nQubits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(operation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Operation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return the number of qubits the operation acts on.</p>',2),tt=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/operations.jl#L5-L9",target:"_blank",rel:"noreferrer"},"source",-1),et=i("h3",{id:"Qiskit",tabindex:"-1"},[e("Qiskit "),i("a",{class:"header-anchor",href:"#Qiskit","aria-label":'Permalink to "Qiskit {#Qiskit}"'},"​")],-1),at={class:"jldocstring custom-block",open:""},nt=i("a",{id:"MonitoredQuantumCircuits.Qiskit.IBMBackend",href:"#MonitoredQuantumCircuits.Qiskit.IBMBackend"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Qiskit.IBMBackend")],-1),lt=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">IBMBackend </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MonitoredQuantumCircuits.QuantumComputer</span></span></code></pre></div><p>A Qiskit backend that runs on IBM&#39;s quantum computers.</p>',2),ot=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/Backends/Qiskit/IBMBackend.jl#L2-L6",target:"_blank",rel:"noreferrer"},"source",-1),rt={class:"jldocstring custom-block",open:""},pt=i("a",{id:"MonitoredQuantumCircuits.Qiskit.CliffordSimulator-Tuple{}",href:"#MonitoredQuantumCircuits.Qiskit.CliffordSimulator-Tuple{}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Qiskit.CliffordSimulator")],-1),ht=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CliffordSimulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>A Qiskit Aer stabilizer simulator.</p>',2),ct=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/Backends/Qiskit/Simulation.jl#L34-L38",target:"_blank",rel:"noreferrer"},"source",-1),ut={class:"jldocstring custom-block",open:""},dt=i("a",{id:"MonitoredQuantumCircuits.Qiskit.GPUStateVectorSimulator-Tuple{}",href:"#MonitoredQuantumCircuits.Qiskit.GPUStateVectorSimulator-Tuple{}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Qiskit.GPUStateVectorSimulator")],-1),kt=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GPUStateVectorSimulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>A Qiskit Aer statevector simulator that runs on the GPU.</p>',2),_t=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/Backends/Qiskit/Simulation.jl#L5-L9",target:"_blank",rel:"noreferrer"},"source",-1),bt={class:"jldocstring custom-block",open:""},gt=i("a",{id:"MonitoredQuantumCircuits.Qiskit.GPUTensorNetworkSimulator-Tuple{}",href:"#MonitoredQuantumCircuits.Qiskit.GPUTensorNetworkSimulator-Tuple{}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Qiskit.GPUTensorNetworkSimulator")],-1),Ct=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GPUTensorNetworkSimulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>A Qiskit Aer tensor network simulator that runs on the GPU.</p>',2),mt=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/Backends/Qiskit/Simulation.jl#L44-L48",target:"_blank",rel:"noreferrer"},"source",-1),yt={class:"jldocstring custom-block",open:""},ft=i("a",{id:"MonitoredQuantumCircuits.Qiskit.StateVectorSimulator-Tuple{}",href:"#MonitoredQuantumCircuits.Qiskit.StateVectorSimulator-Tuple{}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.Qiskit.StateVectorSimulator")],-1),Et=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">StateVectorSimulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>A Qiskit Aer statevector simulator.</p>',2),Tt=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/Backends/Qiskit/Simulation.jl#L21-L25",target:"_blank",rel:"noreferrer"},"source",-1),jt=i("h3",{id:"QuantumClifford",tabindex:"-1"},[e("QuantumClifford "),i("a",{class:"header-anchor",href:"#QuantumClifford","aria-label":'Permalink to "QuantumClifford {#QuantumClifford}"'},"​")],-1),Qt={class:"jldocstring custom-block",open:""},Ft=i("a",{id:"MonitoredQuantumCircuits.QuantumClifford.GPUPauliFrameSimulator",href:"#MonitoredQuantumCircuits.QuantumClifford.GPUPauliFrameSimulator"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.QuantumClifford.GPUPauliFrameSimulator")],-1),Mt=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GPUPauliFrameSimulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>A QuantumClifford stabilizer Pauli frame simulator that runs on the GPU.</p>',2),At=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/Backends/QuantumClifford/Simulation.jl#L35-L39",target:"_blank",rel:"noreferrer"},"source",-1),vt={class:"jldocstring custom-block",open:""},St=i("a",{id:"MonitoredQuantumCircuits.QuantumClifford.PauliFrameSimulator",href:"#MonitoredQuantumCircuits.QuantumClifford.PauliFrameSimulator"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.QuantumClifford.PauliFrameSimulator")],-1),xt=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PauliFrameSimulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>A QuantumClifford stabilizer Pauli frame simulator.</p>',2),Bt=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/Backends/QuantumClifford/Simulation.jl#L27-L31",target:"_blank",rel:"noreferrer"},"source",-1),Dt={class:"jldocstring custom-block",open:""},Pt=i("a",{id:"MonitoredQuantumCircuits.QuantumClifford.TableauSimulator",href:"#MonitoredQuantumCircuits.QuantumClifford.TableauSimulator"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.QuantumClifford.TableauSimulator")],-1),It=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TableauSimulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(qubits</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; mixed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, basis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:Z</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TableauSimulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(initial_state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">QuantumClifford.MixedDestabilizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>A QuantumClifford stabilizer simulator.</p>`,2),Ot=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/Backends/QuantumClifford/Simulation.jl#L1-L6",target:"_blank",rel:"noreferrer"},"source",-1),Vt={class:"jldocstring custom-block",open:""},Lt=i("a",{id:"MonitoredQuantumCircuits.QuantumClifford.projectXX!-Tuple{QuantumClifford.MixedDestabilizer, Int64, Int64}",href:"#MonitoredQuantumCircuits.QuantumClifford.projectXX!-Tuple{QuantumClifford.MixedDestabilizer, Int64, Int64}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.QuantumClifford.projectXX!")],-1),Rt=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">projectXX!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ρ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MixedDestabilizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, q1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, q2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           keep_result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, phases</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Project <em>in-place</em> onto the +1 eigenspace of <code>X_q1 ⊗ X_q2</code>. Returns the modified tableau, the index of the anticommuting stabiliser row (or <code>0</code> if none existed), and – when <code>keep_result=true</code> – the measurement outcome (<code>Bool</code>).</p><p><em>This is the two-qubit analogue of <code>projectX!</code> and is just as fast (O(n) word scans, no allocations, fully inlined).</em></p>`,3),qt=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/Backends/QuantumClifford/util/fastXX.jl#L134-L145",target:"_blank",rel:"noreferrer"},"source",-1),Nt={class:"jldocstring custom-block",open:""},Yt=i("a",{id:"MonitoredQuantumCircuits.QuantumClifford.projectYY!-Tuple{QuantumClifford.MixedDestabilizer, Int64, Int64}",href:"#MonitoredQuantumCircuits.QuantumClifford.projectYY!-Tuple{QuantumClifford.MixedDestabilizer, Int64, Int64}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.QuantumClifford.projectYY!")],-1),wt=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">projectYY!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ρ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MixedDestabilizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, q1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, q2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           keep_result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, phases</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Project <em>in-place</em> onto the +1 eigenspace of <code>Y_q1 ⊗ Y_q2</code>. Returns the modified tableau, the index of the anticommuting stabiliser row (or <code>0</code> if none existed), and – when <code>keep_result=true</code> – the measurement outcome (<code>Bool</code>).</p><p><em>This is the two-qubit analogue of <code>projectY!</code> and is just as fast (O(n) word scans, no allocations, fully inlined).</em></p>`,3),Xt=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/Backends/QuantumClifford/util/fastYY.jl#L134-L145",target:"_blank",rel:"noreferrer"},"source",-1),Zt={class:"jldocstring custom-block",open:""},Jt=i("a",{id:"MonitoredQuantumCircuits.QuantumClifford.projectZZ!-Tuple{QuantumClifford.MixedDestabilizer, Int64, Int64}",href:"#MonitoredQuantumCircuits.QuantumClifford.projectZZ!-Tuple{QuantumClifford.MixedDestabilizer, Int64, Int64}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.QuantumClifford.projectZZ!")],-1),Gt=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">projectZZ!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ρ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MixedDestabilizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, q1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, q2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           keep_result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, phases</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Project <em>in-place</em> onto the +1 eigenspace of <code>Z_q1 ⊗ Z_q2</code>. Returns the modified tableau, the index of the anticommuting stabiliser row (or <code>0</code> if none existed), and – when <code>keep_result=true</code> – the measurement outcome (<code>Bool</code>).</p><p><em>This is the two-qubit analogue of <code>projectZ!</code> and is just as fast (O(n) word scans, no allocations, fully inlined).</em></p>`,3),zt=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/Backends/QuantumClifford/util/fastZZ.jl#L131-L142",target:"_blank",rel:"noreferrer"},"source",-1),Wt={class:"jldocstring custom-block",open:""},Ht=i("a",{id:"MonitoredQuantumCircuits.QuantumClifford.state_entropy-Tuple{QuantumClifford.MixedDestabilizer}",href:"#MonitoredQuantumCircuits.QuantumClifford.state_entropy-Tuple{QuantumClifford.MixedDestabilizer}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.QuantumClifford.state_entropy")],-1),Ut=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">state_entropy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractStabilizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Calculate entropy, i.e. the mixedness, of a stabilizer state from QuantumClifford.</p>',2),$t=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/Backends/QuantumClifford/analysis.jl#L17-L21",target:"_blank",rel:"noreferrer"},"source",-1),Kt={class:"jldocstring custom-block",open:""},ie=i("a",{id:"MonitoredQuantumCircuits.QuantumClifford.tmi-Tuple{QuantumClifford.AbstractStabilizer, Any, Any, Any}",href:"#MonitoredQuantumCircuits.QuantumClifford.tmi-Tuple{QuantumClifford.AbstractStabilizer, Any, Any, Any}"},[i("span",{class:"jlbinding"},"MonitoredQuantumCircuits.QuantumClifford.tmi")],-1),se=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tmi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractStabilizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, A, B, C)</span></span></code></pre></div><p>Calculate the tripartite mutual information of a stabilizer state from QuantumClifford.</p>',2),te=i("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/7c2c39478a8f8a4219ebab60772f15a5beb200b5/src/Backends/QuantumClifford/analysis.jl#L1-L5",target:"_blank",rel:"noreferrer"},"source",-1);function ee(ae,ne,le,oe,re,pe){const s=r("Badge");return p(),o("div",null,[c,u,i("details",d,[i("summary",null,[k,e(),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),_,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[b]),_:1})]),i("details",g,[i("summary",null,[C,e(),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),m,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[y]),_:1})]),i("details",f,[i("summary",null,[E,e(),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),T,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[j]),_:1})]),i("details",Q,[i("summary",null,[F,e(),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),M,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[A]),_:1})]),i("details",v,[i("summary",null,[S,e(),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),x,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[B]),_:1})]),i("details",D,[i("summary",null,[P,e(),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),I,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[O]),_:1})]),i("details",V,[i("summary",null,[L,e(),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),R,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[q]),_:1})]),i("details",N,[i("summary",null,[Y,e(),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),w,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[X]),_:1})]),i("details",Z,[i("summary",null,[J,e(),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),G,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[z]),_:1})]),i("details",W,[i("summary",null,[H,e(),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),U,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[$]),_:1})]),i("details",K,[i("summary",null,[ii,e(),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),si,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[ti]),_:1})]),i("details",ei,[i("summary",null,[ai,e(),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),ni,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[li]),_:1})]),i("details",oi,[i("summary",null,[ri,e(),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),pi,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[hi]),_:1})]),i("details",ci,[i("summary",null,[ui,e(),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),di,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[ki]),_:1})]),i("details",_i,[i("summary",null,[bi,e(),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),gi,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[Ci]),_:1})]),i("details",mi,[i("summary",null,[yi,e(),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),fi,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[Ei]),_:1})]),i("details",Ti,[i("summary",null,[ji,e(),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),Qi,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[Fi]),_:1})]),i("details",Mi,[i("summary",null,[Ai,e(),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),vi,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[Si]),_:1})]),i("details",xi,[i("summary",null,[Bi,e(),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),Di,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[Pi]),_:1})]),i("details",Ii,[i("summary",null,[Oi,e(),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),Vi,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[Li]),_:1})]),i("details",Ri,[i("summary",null,[qi,e(),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),Ni,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[Yi]),_:1})]),i("details",wi,[i("summary",null,[Xi,e(),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),Zi,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[Ji]),_:1})]),i("details",Gi,[i("summary",null,[zi,e(),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),Wi,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[Hi]),_:1})]),i("details",Ui,[i("summary",null,[$i,e(),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),Ki,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[is]),_:1})]),i("details",ss,[i("summary",null,[ts,e(),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),es,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[as]),_:1})]),i("details",ns,[i("summary",null,[ls,e(),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),os,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[rs]),_:1})]),i("details",ps,[i("summary",null,[hs,e(),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),cs,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[us]),_:1})]),i("details",ds,[i("summary",null,[ks,e(),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),_s,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[bs]),_:1})]),i("details",gs,[i("summary",null,[Cs,e(),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),ms,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[ys]),_:1})]),i("details",fs,[i("summary",null,[Es,e(),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Ts,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[js]),_:1})]),i("details",Qs,[i("summary",null,[Fs,e(),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Ms,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[As]),_:1})]),i("details",vs,[i("summary",null,[Ss,e(),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),xs,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[Bs]),_:1})]),i("details",Ds,[i("summary",null,[Ps,e(),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Is,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[Os]),_:1})]),i("details",Vs,[i("summary",null,[Ls,e(),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Rs,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[qs]),_:1})]),i("details",Ns,[i("summary",null,[Ys,e(),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),ws,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[Xs]),_:1})]),i("details",Zs,[i("summary",null,[Js,e(),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Gs,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[zs]),_:1})]),i("details",Ws,[i("summary",null,[Hs,e(),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Us,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[$s]),_:1})]),i("details",Ks,[i("summary",null,[it,e(),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),st,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[tt]),_:1})]),et,i("details",at,[i("summary",null,[nt,e(),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),lt,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[ot]),_:1})]),i("details",rt,[i("summary",null,[pt,e(),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),ht,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[ct]),_:1})]),i("details",ut,[i("summary",null,[dt,e(),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),kt,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[_t]),_:1})]),i("details",bt,[i("summary",null,[gt,e(),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Ct,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[mt]),_:1})]),i("details",yt,[i("summary",null,[ft,e(),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Et,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[Tt]),_:1})]),jt,i("details",Qt,[i("summary",null,[Ft,e(),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),Mt,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[At]),_:1})]),i("details",vt,[i("summary",null,[St,e(),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),xt,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[Bt]),_:1})]),i("details",Dt,[i("summary",null,[Pt,e(),t(s,{type:"info",class:"jlObjectType jlType",text:"Type"})]),It,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[Ot]),_:1})]),i("details",Vt,[i("summary",null,[Lt,e(),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Rt,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[qt]),_:1})]),i("details",Nt,[i("summary",null,[Yt,e(),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),wt,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[Xt]),_:1})]),i("details",Zt,[i("summary",null,[Jt,e(),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Gt,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[zt]),_:1})]),i("details",Wt,[i("summary",null,[Ht,e(),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),Ut,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[$t]),_:1})]),i("details",Kt,[i("summary",null,[ie,e(),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),se,t(s,{type:"info",class:"source-link",text:"source"},{default:a(()=>[te]),_:1})])])}const ue=l(h,[["render",ee]]);export{ce as __pageData,ue as default};

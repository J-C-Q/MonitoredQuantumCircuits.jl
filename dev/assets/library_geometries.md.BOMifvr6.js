import{_ as r,c as l,j as s,a,I as e,w as n,a7 as t,D as o,o as h}from"./chunks/framework.BlNHQ1cX.js";const x=JSON.parse('{"title":"Qubit Geometries","description":"","frontmatter":{},"headers":[],"relativePath":"library/geometries.md","filePath":"library/geometries.md","lastUpdated":null}'),p={name:"library/geometries.md"},d=t('<h1 id="Qubit-Geometries" tabindex="-1">Qubit Geometries <a class="header-anchor" href="#Qubit-Geometries" aria-label="Permalink to &quot;Qubit Geometries {#Qubit-Geometries}&quot;">​</a></h1><p>A <strong>Geometry</strong> defines the spatial arrangement and connectivity of qubits, typically represented as a graph structure. MonitoredQuantumCircuits.jl provides several commonly used geometries out of the box, facilitating the construction and analysis of quantum circuits on a variety of lattice types. Users may also implement custom geometries by following the <a href="/MonitoredQuantumCircuits.jl/dev/interfaces/add_geometry">geometry interface</a>.</p><h2 id="Available-Geometries" tabindex="-1">Available Geometries <a class="header-anchor" href="#Available-Geometries" aria-label="Permalink to &quot;Available Geometries {#Available-Geometries}&quot;">​</a></h2><ul><li><p><strong>ChainGeometry</strong> Represents a chain (one-dimensional) structure, supporting both periodic and open boundary conditions.</p></li><li><p><strong>HoneycombGeometry</strong> Represents a honeycomb lattice structure, supporting both periodic and open boundary conditions.</p></li><li><p><strong>ShastrySutherlandGeometry</strong> Represents a Shastry-Sutherland lattice.</p></li></ul><hr><h2 id="API-Reference" tabindex="-1">API Reference <a class="header-anchor" href="#API-Reference" aria-label="Permalink to &quot;API Reference {#API-Reference}&quot;">​</a></h2>',6),c={class:"jldocstring custom-block",open:""},k=s("a",{id:"MonitoredQuantumCircuits.ChainGeometry-library-geometries",href:"#MonitoredQuantumCircuits.ChainGeometry-library-geometries"},[s("span",{class:"jlbinding"},"MonitoredQuantumCircuits.ChainGeometry")],-1),g=t(`<p>A data structure representing a one-dimensional chain geometry of qubits.</p><p><strong>Constructors</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ChainGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Periodic, size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Constructs a chain geometry with periodic boundary conditions (i.e., a closed loop).</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ChainGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Open, size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Constructs a chain geometry with open boundary conditions (i.e., a linear chain).</p><p><strong>Arguments</strong></p><ul><li><code>size::Integer</code>: The number of qubits in the chain.</li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create a chain of 8 qubits with periodic boundaries</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">geometry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ChainGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Periodic, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create a chain of 10 qubits with open boundaries</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">geometry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ChainGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Open, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,10),u=s("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/cd630c8339887fb749f6713749b443d9d41c644a/src/geometries/ChainGeometry.jl#L1-L27",target:"_blank",rel:"noreferrer"},"source",-1),y={class:"jldocstring custom-block",open:""},m=s("a",{id:"MonitoredQuantumCircuits.HoneycombGeometry-library-geometries",href:"#MonitoredQuantumCircuits.HoneycombGeometry-library-geometries"},[s("span",{class:"jlbinding"},"MonitoredQuantumCircuits.HoneycombGeometry")],-1),b=t(`<p>A data structure representing a honeycomb lattice geometry.</p><p><strong>Constructors</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HoneycombGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Periodic, sizeX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sizeY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Create a honeycomb geometry with periodic boundary conditions.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HoneycombGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Open, sizeX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sizeY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Create a honeycomb geometry with open boundary conditions.</p><p><strong>Arguments</strong></p><ul><li><p><code>sizeX::Integer</code>: Width of the lattice</p></li><li><p><code>sizeY::Integer</code>: Height of the lattice (must be even)</p></li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create a 4×4 honeycomb lattice with periodic boundaries</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">geometry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> HoneycombGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Periodic, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create a 6×6 honeycomb lattice with open boundaries</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">geometry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> HoneycombGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Open, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,10),E=s("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/cd630c8339887fb749f6713749b443d9d41c644a/src/geometries/HoneycombLattice_Periodic.jl#L1-L28",target:"_blank",rel:"noreferrer"},"source",-1),C={class:"jldocstring custom-block",open:""},_=s("a",{id:"MonitoredQuantumCircuits.ShastrySutherlandGeometry-library-geometries",href:"#MonitoredQuantumCircuits.ShastrySutherlandGeometry-library-geometries"},[s("span",{class:"jlbinding"},"MonitoredQuantumCircuits.ShastrySutherlandGeometry")],-1),F=t(`<p>A data structure representing a Shastry-Sutherland lattice geometry.</p><p><strong>Constructors</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ShastrySutherlandGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Periodic, sizeX</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sizeY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Construct a Shastry-Sutherland geometry with periodic boundary conditions.</p><p><strong>Arguments</strong></p><ul><li><p><code>sizeX::Integer</code>: The number of sites in the x direction</p></li><li><p><code>sizeY::Integer</code>: The number of sites in the y direction</p></li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create a 4×4 Shastry-Sutherland lattice with periodic boundaries</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">geometry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ShastrySutherlandGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Periodic, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,8),f=s("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/cd630c8339887fb749f6713749b443d9d41c644a/src/geometries/ShastrySutherlandGeometry.jl#L1-L21",target:"_blank",rel:"noreferrer"},"source",-1);function v(A,j,T,G,S,B){const i=o("Badge");return h(),l("div",null,[d,s("details",c,[s("summary",null,[k,a(),e(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),g,e(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[u]),_:1})]),s("details",y,[s("summary",null,[m,a(),e(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),b,e(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[E]),_:1})]),s("details",C,[s("summary",null,[_,a(),e(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),F,e(i,{type:"info",class:"source-link",text:"source"},{default:n(()=>[f]),_:1})])])}const I=r(p,[["render",v]]);export{x as __pageData,I as default};

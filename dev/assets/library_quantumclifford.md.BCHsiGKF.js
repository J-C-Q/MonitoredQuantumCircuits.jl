import{_ as r,c as n,j as a,a as s,I as t,w as l,a7 as e,D as o,o as u}from"./chunks/framework.BlNHQ1cX.js";const B=JSON.parse('{"title":"QuantumClifford.jl","description":"","frontmatter":{},"headers":[],"relativePath":"library/quantumclifford.md","filePath":"library/quantumclifford.md","lastUpdated":null}'),d={name:"library/quantumclifford.md"},c=e('<h1 id="QuantumClifford.jl" tabindex="-1">QuantumClifford.jl <a class="header-anchor" href="#QuantumClifford.jl" aria-label="Permalink to &quot;QuantumClifford.jl {#QuantumClifford.jl}&quot;">​</a></h1><p><a href="https://github.com/QuantumSavory/QuantumClifford.jl" target="_blank" rel="noreferrer">QuantumClifford.jl</a> is a Julia package for simulating and manipulating quantum stabilizer states and Clifford circuits. It offers a comprehensive suite of tools for working with circuits that can be represented within the stabilizer formalism, providing both efficiency and ease of use for researchers and practitioners in quantum computing.</p><p>Within MonitoredQuantumCircuits.jl, QuantumClifford.jl serves as a backend for simulating quantum circuits that fall within the Clifford class. This enables efficient simulation of a wide range of quantum protocols and algorithms that can be described using stabilizer states.</p><h2 id="Available-Backends" tabindex="-1">Available Backends <a class="header-anchor" href="#Available-Backends" aria-label="Permalink to &quot;Available Backends {#Available-Backends}&quot;">​</a></h2><ul><li><strong>Simulators</strong><ul><li><p><code>TableauSimulator()</code></p></li><li><p><code>PauliFrameSimulator()</code></p></li><li><p><code>GPUPauliFrameSimulator()</code></p></li></ul></li></ul><p>For details on how to understand the results, please refer to the <a href="https://qc.quantumsavory.org/stable/" target="_blank" rel="noreferrer">QuantumClifford.jl documentation</a>.</p><hr><h2 id="API-Reference" tabindex="-1">API Reference <a class="header-anchor" href="#API-Reference" aria-label="Permalink to &quot;API Reference {#API-Reference}&quot;">​</a></h2>',8),f={class:"jldocstring custom-block",open:""},h=a("a",{id:"MonitoredQuantumCircuits.QuantumClifford.TableauSimulator-library-quantumclifford",href:"#MonitoredQuantumCircuits.QuantumClifford.TableauSimulator-library-quantumclifford"},[a("span",{class:"jlbinding"},"MonitoredQuantumCircuits.QuantumClifford.TableauSimulator")],-1),m=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TableauSimulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(qubits</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; mixed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, basis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:Z</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>A QuantumClifford stabilizer simulator.</p>',2),p=a("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/af992b598797590e7909dbc9fca0c5200dd21155/src/Backends/QuantumClifford/Simulation.jl#L1-L5",target:"_blank",rel:"noreferrer"},"source",-1),_={class:"jldocstring custom-block",open:""},b=a("a",{id:"MonitoredQuantumCircuits.QuantumClifford.PauliFrameSimulator-library-quantumclifford",href:"#MonitoredQuantumCircuits.QuantumClifford.PauliFrameSimulator-library-quantumclifford"},[a("span",{class:"jlbinding"},"MonitoredQuantumCircuits.QuantumClifford.PauliFrameSimulator")],-1),k=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PauliFrameSimulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>A QuantumClifford stabilizer Pauli frame simulator.</p>',2),C=a("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/af992b598797590e7909dbc9fca0c5200dd21155/src/Backends/QuantumClifford/Simulation.jl#L69-L73",target:"_blank",rel:"noreferrer"},"source",-1),g={class:"jldocstring custom-block",open:""},y=a("a",{id:"MonitoredQuantumCircuits.QuantumClifford.GPUPauliFrameSimulator-library-quantumclifford",href:"#MonitoredQuantumCircuits.QuantumClifford.GPUPauliFrameSimulator-library-quantumclifford"},[a("span",{class:"jlbinding"},"MonitoredQuantumCircuits.QuantumClifford.GPUPauliFrameSimulator")],-1),Q=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GPUPauliFrameSimulator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>A QuantumClifford stabilizer Pauli frame simulator that runs on the GPU.</p>',2),T=a("a",{href:"https://github.com/J-C-Q/MonitoredQuantumCircuits.jl/blob/af992b598797590e7909dbc9fca0c5200dd21155/src/Backends/QuantumClifford/Simulation.jl#L78-L82",target:"_blank",rel:"noreferrer"},"source",-1);function j(P,S,E,v,A,F){const i=o("Badge");return u(),n("div",null,[c,a("details",f,[a("summary",null,[h,s(),t(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),m,t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>[p]),_:1})]),a("details",_,[a("summary",null,[b,s(),t(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),k,t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>[C]),_:1})]),a("details",g,[a("summary",null,[y,s(),t(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),Q,t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>[T]),_:1})])])}const x=r(d,[["render",j]]);export{B as __pageData,x as default};
